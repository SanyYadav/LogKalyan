import { View, Text, TextInput, TouchableOpacity, Image } from 'react-native';
import React, { useEffect, useState } from 'react';
//import firestore from '@react-native-firebase/firestore';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as ImagePicker from 'expo-image-picker';
//import * as Permissions from 'expo-permissions'; // Import Permissions from Expo
//import storage from '@react-native-firebase/storage';
import { db } from '../../firebase';
import { st } from '../../firebase';
import { rd } from '../../firebase';

let userId = '',
    name = '',
    profileUrl = '';

const AddNewPost = ({ navigation }) => {
    const [caption, setCaption] = useState('');
    const [data, setData] = useState(null);
    useEffect(() => {
        getData();
    }, []);

    const getData = async () => {
        userId = await AsyncStorage.getItem('USERID');
        name = await AsyncStorage.getItem('NAME');
        let email = await AsyncStorage.getItem('EMAIL');

        db.collection('Users')
            // Filter results
            .where('email', '==', email)

            .get()
            .then(querySnapshot => {
                /* ... */
                if (querySnapshot.docs.length === 0) {
                    alert('User Not Found');
                } else {
                    console.log(querySnapshot.docs[0]._data);
                    profileUrl = querySnapshot.docs[0]._data.profileImage;
                }
            })
            .catch(error => {
                console.log(error);
            });
    };

    const openCamera = async () => {
        //const { status } = await Permissions.askAsync(Permissions.CAMERA);
        //if (status !== 'granted') {
         //   alert('Camera permission denied');
         //   return;
        //}

        const result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.All,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });

        if (!result.canceled) {
            setData(result);
        }
    };

    const uploadImage = async () => {
        if (!data) {
            alert('Please pick an image first.');
            return;
        }
    
        const response = await fetch(data.assets[0].uri);
        const blob = await response.blob();
    
        try {
            const reference = st.ref().child(data.assets[0].fileName);
            // Upload the file
            await reference.put(blob);
    
            // Get the download URL
            const url = await reference.getDownloadURL();
            console.log(url);
            
            // Once you have the URL, you can save it along with other data
            saveData(url);
        } catch (error) {
            console.error('Error uploading file:', error);
        }
    };

    const saveData = async (url) => {
        try {
            // Add post to Firestore
            const firestoreResponse = await db.collection('Posts').add({
                caption: caption,
                name: name,
                userId: userId,
                postImage: url,
                userImage: profileUrl
            });
    
            // Get the ID of the newly added post from Firestore
            const postId = firestoreResponse.id;
    
            // Construct the data to be stored in Realtime Database
            const realtimeData = {
                caption: caption,
                name: name,
                userId: userId,
                postImage: url,
                userImage: profileUrl
            };
    
            // Add post to Realtime Database using the same ID generated by Firestore
            await rd.ref('Posts/' + postId).set(realtimeData);
    
            console.log('Post added successfully!');
            navigation.goBack();
        } catch (error) {
            console.error('Error adding post:', error);
        }
    };

    return (
        <View style={{ flex: 1 }}>
            <TextInput
                placeholder="Enter Caption"
                value={caption}
                onChangeText={txt => {
                    setCaption(txt);
                }}
                style={{
                    width: '90%',
                    height: 50,
                    borderRadius: 10,
                    marginTop: 50,
                    alignSelf: 'center',
                    borderWidth: 1,
                    paddingLeft: 20,
                }}
            />

            <TouchableOpacity
                style={{
                    width: '90%',
                    height: 50,
                    backgroundColor: 'blue',
                    marginTop: 50,
                    borderRadius: 10,
                    alignSelf: 'center',
                    justifyContent: 'center',
                    alignItems: 'center',
                }}
                onPress={() => {
                    openCamera();
                }}>
                <Text style={{ color: '#fff', fontSize: 16 }}>Pick Image</Text>

            </TouchableOpacity>
            {data !== null ? (
                <Image
                    source={{ uri: data.uri }}
                    style={{
                        width: '90%',
                        height: 200,
                        alignSelf: 'center',
                        marginTop: 20,
                    }}
                />
            ) : null}
            <TouchableOpacity
                style={{
                    width: '90%',
                    height: 50,
                    backgroundColor: 'purple',
                    marginTop: 50,
                    borderRadius: 10,
                    alignSelf: 'center',
                    justifyContent: 'center',
                    alignItems: 'center',
                }}
                onPress={() => {
                    uploadImage();
                }}>
                <Text style={{ color: '#fff', fontSize: 16 }}>Upload Image</Text>
            </TouchableOpacity>
        </View>
    );
};

export default AddNewPost;